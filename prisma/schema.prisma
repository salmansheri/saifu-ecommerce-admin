// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  stores         Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  billboards Billboard[] @relation("BillboardToStore")
  sizes      Size[]      @relation("SizeToStore")
  colors     Color[]     @relation("ColorToStore")
  products   Product[]   @relation("ProductToStore")
  orders     Order[]     @relation("OrderToStore")
  Category   Category[]

  @@index([userId])
}

model Billboard {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store      @relation("BillboardToStore", fields: [storeId], references: [id], onDelete: Cascade)
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  Product Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store    @relation("SizeToStore", fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[] @relation("SizeToProduct")

  @@index([storeId])
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("ColorToStore", fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ColorToProduct")

  @@index([storeId])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation("ProductToStore", fields: [storeId], references: [id], onDelete: Cascade)
  categoryId  String      @db.ObjectId
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: Cascade)
  name        String
  price       Int
  isFeatured  Boolean     @default(false)
  isArchieved Boolean     @default(false)
  sizeId      String      @db.ObjectId
  size        Size        @relation("SizeToProduct", fields: [sizeId], references: [id], onDelete: Cascade)
  colorId     String      @db.ObjectId
  color       Color       @relation("ColorToProduct", fields: [colorId], references: [id], onDelete: Cascade)
  images      Image[]     @relation("ImageToProduct")
  orderItems  OrderItem[] @relation("OrderItemToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  genderId    String      @db.ObjectId
  gender      Gender      @relation("GenderToProduct", fields: [genderId], references: [id], onDelete: Cascade)

  @@index([storeId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation("ImageToProduct", fields: [productId], references: [id], onDelete: Cascade)
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum GenderType {
  men
  women
  mobile
}

model Gender {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      GenderType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  products Product[] @relation("GenderToProduct")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("OrderToStore", fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[] @relation("OrderItemToOrder")
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation("OrderItemToOrder", fields: [orderId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation("OrderItemToProduct", fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}
